generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  firstName   String
  lastName    String
  email       String     @unique
  password    String
  displayName String
  posts       Post[]
  likes       Reaction[]
  comments    Comment[]
  followedBy  Follows[]  @relation("following")
  following   Follows[]  @relation("follower")
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  createdBy   String?    @db.Uuid
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?    @db.Uuid
}

model Post {
  id         String             @id @default(uuid())
  title      String
  content    String
  image      String
  authorId   String
  author     User               @relation(fields: [authorId], references: [id])
  likes      Reaction[]
  comments   Comment[]
  categories Posts_Categories[]
  createdAt  DateTime           @default(now()) @db.Timestamptz(6)
  createdBy  String?            @db.Uuid
  updatedAt  DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  String?            @db.Uuid
}

model Category {
  id        String             @id @default(uuid())
  name      String
  posts     Posts_Categories[]
  createdAt DateTime           @default(now()) @db.Timestamptz(6)
  createdBy String?            @db.Uuid
  updatedAt DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?            @db.Uuid
}

model Posts_Categories {
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  createdBy  String?  @db.Uuid
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  String?  @db.Uuid

  @@id([postId, categoryId])
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String?  @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid

  @@id([followerId, followingId])
}

model Reaction {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
}

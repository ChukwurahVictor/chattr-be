generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @default(uuid()) @id
  firstName          String
  lastName           String
  email              String    @unique
  password           String
  displayName        String
  posts              Post[]
  likes              Reaction[]
  comments           Comment[]
  followedBy         Follows[] @relation("following")
  following          Follows[] @relation("follower")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Post {
  id                 String    @default(uuid()) @id
  title              String
  content            String
  image              String
  authorId           String
  author             User      @relation(fields: [authorId], references: [id])
  likes              Reaction[]
  comments           Comment[]
  categories         Posts_Categories[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Category {
  id                  String       @default(uuid()) @id
  name                String
  posts               Posts_Categories[]
}

model Posts_Categories {
  post               Post      @relation(fields: [postId], references: [id])
  postId             String
  category           Category  @relation(fields: [categoryId], references: [id])
  categoryId         String
  assignedAt         DateTime  @default(now())
  assignedBy         String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@id([postId, categoryId])
}

model Follows {
  follower           User      @relation("follower", fields: [followerId], references: [id])
  followerId         String
  following          User      @relation("following", fields: [followingId], references: [id])
  followingId        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@id([followerId, followingId])
}

model Reaction {
  id                 String    @default(uuid()) @id
  post               Post      @relation(fields: [postId], references: [id])
  postId             String
  user               User      @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Comment {
  id                 String    @default(uuid()) @id
  post               Post      @relation(fields: [postId], references: [id])
  postId             String
  body               String
  user               User      @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}